precision mediump float;
uniform sampler2D uMainSampler;
varying vec2 outTexCoord;
uniform float time;
uniform vec2 mouse;

float rand(vec2 co){
  return fract(sin(dot(co.xy ,vec2(12.9898,time))) * 43758.5453);
}


vec4 point(vec2 uv){
	return texture2D(uMainSampler, uv);
}

vec4 avgColor(vec2 uv){
	const float scale = 0.005;
	vec2 ver = vec2(0.0, scale);
	vec2 hor = vec2(0.2*scale, 0.0);
	
	
	float center = 2.0;
	float edge = 1.0;
	float corner = 0.5;
	
	float tot = center + edge + corner;
	center /= tot;
	edge /= tot;
	corner /= tot;
	
	
	vec4 sum = center*point(uv);
	sum += edge*point(uv + ver) + edge*point(uv - ver) + edge*point(uv + hor) + edge*point(uv - hor);
	sum += corner*point(uv + ver + hor) + corner*point(uv + ver - hor) + corner*point(uv - ver + hor) + corner*point(uv - ver - hor);
				
	
	return sum;
}

vec4 glow(vec2 uv, vec4 grad){
	return ((1.3 - grad)*avgColor(uv) + point(uv));
}

float noise(vec2 uv){
	return 0.75 + rand(uv);
}

vec2 distortion(vec2 uv){
	float amp = 0.2*pow(abs(sin(1.0*time)), 1000.0);
    const float per = 100.0;
	float dy = amp*sin(per*(uv.x + time/4.0));
    return vec2(0, dy);
}

vec4 scanline(vec2 uv, vec4 grad){
	const float period = 256.0;
	const float amp = 0.9;
	vec3 wave = vec3(amp*sin(period*uv.y));
	vec4 screen = vec4(wave, 1.0);
	screen *= screen;
	screen += 0.2;
	screen += 0.3*grad;
	
	return screen;
}

vec4 vignette(vec2 uv){
	const vec2 center = vec2(0.5, 0.5);
	float dist = length(center - uv);
	float r = 0.9 - dist;
	
	return vec4(vec3(r), 1.0);
}

vec4 gradient(vec2 uv){
	return vec4(vec3(smoothstep(0.49, 0.51, max(1.0 - uv.x, 0.6*uv.y))), 1.0);

}

float cubic(float x, float c){
	float a = 2.0*c - 2.0;
	float b = 3.0 - 3.0*c;
	return a*x*x*x + b*x*x + c*x;
}

void main(void) {
	vec2 uv = outTexCoord;
	float c = 0.99;
	vec2 center = mouse;//vec2(0.5);
    float r1 = length(uv - center);
	float r2 = cubic(r1, c);
   	
    vec2 bubble = center + (r2/r1)*(uv - center);
	
    vec4 g = gradient(uv);
    
	
	gl_FragColor = glow(bubble + distortion(bubble), g);
	
	gl_FragColor *= vignette(uv);
	gl_FragColor *= scanline(bubble, g);
	gl_FragColor *= noise(uv);
	
	//gl_FragColor = g;
	//gl_FragColor = point(uv);
	
}


